#!/bin/bash

# Set SLURP_FILE path. Use ~/tmp if it exists, otherwise use /tmp
if [ -d ~/tmp ]; then
  SLURP_FILE=~/tmp/ai-commit-msg.slurp
else
  SLURP_FILE=/tmp/ai-commit-msg.slurp
fi


# Check if OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
  echo "Error: OPENAI_API_KEY environment variable is not set" >&2
  exit 1
fi

# Get git diff context
diff_context=$(git diff --cached --diff-algorithm=minimal)
if [ -z "$diff_context" ]; then
  echo "Error: No staged changes found" >&2
  exit 1
fi

# Get last 3 commit messages
recent_commits=$(git log -3 --pretty=format:"%B")

# Prepare prompt
prompt="Generate a git commit message following this structure:
1. First line: conventional commit format (type: concise description) (remember to use semantic types like feat, fix, docs, style, refactor, perf, test, chore, etc.)
2. Optional bullet points if more context helps:
   - Keep the second line blank
   - Keep them short and direct
   - Focus on what changed
   - Always be terse
   - Don't overly explain
   - Drop any fluffy or formal language

Return ONLY the commit message - no introduction, no explanation, no quotes around it.

Examples:
feature: add user auth system

- Add JWT tokens for API auth
- Handle token refresh for long sessions

fix: resolve memory leak in worker pool

- Clean up idle connections
- Add timeout for stale workers

Simple change example:
fix: typo in README.md

Very important:
- Do not respond with any of the examples
- Your message must be based off the diff that is about to be provided, with a little bit of styling informed by the recent commits you're about to see
- Add newlines (\n) when relevant

Recent commits from this repo (for style reference):
$recent_commits

Here's the diff:

$diff_context"

# Ensure clean slurp file
[ -f "$SLURP_FILE" ] && rm "$SLURP_FILE"
echo "$prompt" > "$SLURP_FILE"

# Prepare JSON with rawfile
json_payload=$(jq -n --rawfile promptfile "$SLURP_FILE" '{
  model: "gpt-4.1-mini",
  messages: [
    {
      role: "user",
      content: $promptfile
    }
  ],
  response_format: { type: "text" },
  temperature: 0.3,
  max_tokens: 1000
}')

# Call OpenAI API
response=$(curl -s https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$json_payload")

# Extract and output commit message
echo "$response" | jq -r '.choices[0].message.content'
